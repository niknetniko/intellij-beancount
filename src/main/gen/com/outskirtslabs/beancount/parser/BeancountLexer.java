/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// This lexer is adapter from the flex lexer at
// https://github.com/beancount/beancount/blob/v2/beancount/parser/lexer.l
package com.outskirtslabs.beancount.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.outskirtslabs.beancount.psi.BeancountTypes.*;
//import static com.outskirtslabs.beancount.BeancountLexerUtil.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Beancount.flex</tt>
 */
class BeancountLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int sINVALID = 2;
  public static final int sIGNORE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\37\1\11\2\12\1\1\22\0\1\37\1\36\1\7\1\16\1\0\2\36\1\5\1\47\1\50\1"+
    "\51\1\46\1\14\1\6\1\15\1\3\12\2\1\22\1\40\3\0\1\36\1\42\2\4\1\35\11\4\1\35"+
    "\2\4\1\35\1\4\4\35\5\4\1\0\1\10\1\0\1\21\1\20\1\0\1\56\1\55\1\60\1\66\1\61"+
    "\1\17\1\76\1\75\1\67\2\17\1\57\1\65\1\54\1\62\1\63\1\72\1\74\1\64\1\52\1\73"+
    "\1\71\1\17\1\53\1\70\1\17\1\43\1\41\1\44\1\45\1\0\5\23\1\13\12\23\20\32\40"+
    "\26\2\0\36\24\1\25\14\27\1\30\2\27\1\31\3\33\1\34\263\0\2\12\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\2\1\3\1\7\1\10\11\2\2\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\12\2\1\10\1\2\2\11\1\12\1\24\1\2"+
    "\1\25\1\2\1\4\1\0\1\4\1\26\14\0\1\27"+
    "\1\0\1\30\1\0\1\31\1\32\1\33\1\34\20\0"+
    "\14\35\1\36\1\1\2\4\1\26\2\0\1\26\1\37"+
    "\7\0\1\40\1\41\10\0\1\42\7\0\1\4\1\26"+
    "\2\0\1\26\1\43\6\0\1\44\11\0\1\26\2\0"+
    "\1\26\1\0\1\45\2\0\1\46\6\0\1\47\2\0"+
    "\1\50\1\0\1\26\2\0\1\26\2\0\1\51\1\52"+
    "\1\53\1\54\6\0\1\26\2\0\1\26\1\55\1\0"+
    "\1\56\1\57\2\0\1\60\1\61\1\26\2\0\1\26"+
    "\1\0\1\62\1\63\1\26\2\0\1\26\1\64\1\26"+
    "\2\0\2\26\2\0\2\26\2\0\2\26\2\0\2\26"+
    "\2\0\2\26\2\0\2\26\2\0\2\26\2\0\2\26"+
    "\2\0\2\26\2\0\2\26\2\0\2\26\2\0\2\26"+
    "\2\0\2\26\2\0\3\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\374"+
    "\0\u01b9\0\374\0\u01f8\0\374\0\374\0\u0237\0\u0276\0\u02b5"+
    "\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u01b9"+
    "\0\374\0\u013b\0\u04ad\0\374\0\u04ec\0\u052b\0\u056a\0\374"+
    "\0\374\0\374\0\374\0\374\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u085e\0\u08dc\0\u085e\0\u091b\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0a56\0\u0ad4\0\u0b13\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u01f8\0\374"+
    "\0\u0b52\0\u0237\0\u0b91\0\u02b5\0\374\0\374\0\374\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\374"+
    "\0\u0a95\0\u0a56\0\u0ad4\0\u0b13\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\374\0\u095a\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\374\0\u0b91\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u0b91\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u16a4\0\u16e3\0\u0b91\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u0b91\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u0b91\0\u1b90\0\u1bcf\0\u0b91\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\u1d0a\0\u1d49\0\u0b91\0\u1d88\0\u1dc7\0\u0b91\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u0b91\0\u0b91\0\u0b91"+
    "\0\u0b91\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb"+
    "\0\u20fa\0\u20bb\0\u20fa\0\u0b91\0\u2139\0\u0b91\0\u0b91\0\u2178"+
    "\0\u21b7\0\u0b91\0\u207c\0\u21f6\0\u2235\0\u21f6\0\u2235\0\u2274"+
    "\0\u0b91\0\u0b91\0\u22b3\0\u22f2\0\u22b3\0\u22f2\0\u0b91\0\u2331"+
    "\0\u2370\0\u2331\0\u2370\0\u23af\0\u23ee\0\u23af\0\u23ee\0\u242d"+
    "\0\u246c\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u25a7\0\u25e6\0\u2625"+
    "\0\u2664\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u26a3\0\u26e2\0\u2721"+
    "\0\u2760\0\u2721\0\u2760\0\u279f\0\u27de\0\u279f\0\u27de\0\u281d"+
    "\0\u285c\0\u281d\0\u285c\0\u289b\0\u28da\0\u289b\0\u28da\0\u2919"+
    "\0\u2958\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2997\0\u29d6\0\u0ad4"+
    "\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\5\1\14\2\0\1\15\1\5\1\16\1\17\1\5"+
    "\1\20\2\5\1\21\1\22\1\5\1\23\1\24\1\25"+
    "\1\5\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\17\1\46\1\47\2\17\1\50\1\51\1\52"+
    "\1\53\2\17\1\54\1\55\2\17\1\56\4\17\1\5"+
    "\1\6\1\7\1\10\1\11\1\5\1\12\1\13\1\5"+
    "\1\14\2\0\1\15\1\5\1\57\1\17\1\5\1\20"+
    "\1\60\1\5\1\21\1\22\1\5\1\23\1\24\1\25"+
    "\1\5\1\26\1\27\1\61\1\62\1\63\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\64"+
    "\1\45\1\17\1\46\1\47\2\17\1\50\1\51\1\52"+
    "\1\53\2\17\1\54\1\55\2\17\1\56\4\17\1\65"+
    "\1\0\7\65\1\0\2\66\23\65\1\5\37\65\1\67"+
    "\1\0\7\67\3\0\63\67\100\0\1\32\35\0\1\32"+
    "\41\0\1\70\11\0\1\71\1\72\63\0\1\73\1\0"+
    "\1\73\1\74\1\75\6\0\1\74\1\0\1\76\1\74"+
    "\1\0\1\77\1\0\1\100\1\101\1\0\1\102\1\103"+
    "\1\104\1\0\1\105\1\106\1\73\14\0\25\76\7\107"+
    "\1\110\1\111\66\107\2\0\3\112\1\0\1\112\6\0"+
    "\1\112\1\0\2\112\14\0\1\112\14\0\25\112\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\14\0"+
    "\1\113\14\0\25\113\2\0\3\114\1\0\1\114\6\0"+
    "\1\114\1\0\2\114\14\0\1\114\14\0\25\114\13\0"+
    "\1\76\7\0\1\76\2\0\1\76\3\0\1\76\72\0"+
    "\1\100\63\0\1\100\7\0\1\100\2\0\1\100\3\0"+
    "\1\100\57\0\1\100\7\0\1\100\6\0\1\100\72\0"+
    "\1\102\3\0\1\102\57\0\1\102\7\0\1\102\2\0"+
    "\1\102\3\0\1\102\57\0\1\102\7\0\1\102\53\0"+
    "\1\33\1\0\7\33\3\0\63\33\42\0\1\115\77\0"+
    "\1\116\77\0\1\117\34\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\14\0\1\113\14\0\1\113\1\120"+
    "\23\113\2\0\1\113\1\0\1\113\1\0\1\113\10\0"+
    "\2\113\14\0\1\113\14\0\10\113\1\121\14\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\14\0"+
    "\1\113\14\0\4\113\1\122\20\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\14\0\1\113\14\0"+
    "\5\113\1\123\2\113\1\124\10\113\1\125\3\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\14\0"+
    "\1\113\14\0\17\113\1\126\5\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\14\0\1\113\14\0"+
    "\11\113\1\127\13\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\14\0\1\113\14\0\4\113\1\130"+
    "\1\131\2\113\1\132\10\113\1\133\1\134\2\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\14\0"+
    "\1\113\14\0\10\113\1\135\14\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\14\0\1\113\14\0"+
    "\2\113\1\136\22\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\14\0\1\113\14\0\21\113\1\137"+
    "\3\113\1\140\1\0\3\112\1\140\1\112\2\140\3\0"+
    "\1\140\1\112\1\140\2\112\14\140\1\112\14\140\25\112"+
    "\1\140\1\0\7\140\3\0\64\140\1\0\1\73\1\140"+
    "\1\73\1\141\1\142\2\140\3\0\1\140\1\141\1\140"+
    "\1\143\1\141\1\140\1\144\1\140\1\145\1\146\1\140"+
    "\1\147\1\150\1\151\1\140\1\152\1\153\1\73\14\140"+
    "\25\143\1\154\1\32\7\154\1\0\25\154\1\63\37\154"+
    "\1\66\1\0\7\66\1\0\25\66\1\0\37\66\1\155"+
    "\1\0\7\155\3\0\63\155\2\0\1\156\11\0\1\71"+
    "\1\72\63\0\1\157\11\0\1\71\64\0\1\72\76\0"+
    "\1\160\1\0\1\160\1\161\1\162\6\0\1\161\1\0"+
    "\1\76\1\161\1\0\1\77\1\0\1\100\1\101\1\0"+
    "\1\102\1\103\1\104\1\0\1\105\1\106\1\160\14\0"+
    "\25\76\2\0\1\163\1\0\1\163\2\161\6\0\1\161"+
    "\2\0\1\161\14\0\1\163\43\0\1\76\1\0\1\76"+
    "\1\0\1\76\10\0\1\76\2\0\1\77\1\0\1\100"+
    "\1\101\1\0\1\102\1\103\1\104\1\0\1\105\1\106"+
    "\1\76\14\0\25\76\2\0\1\164\1\0\1\164\17\0"+
    "\1\165\1\166\1\0\1\167\1\170\1\171\1\0\1\172"+
    "\1\173\1\164\41\0\1\107\1\0\7\107\3\0\63\107"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\25\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\2\113\1\175\22\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\1\176\24\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\5\113\1\177\17\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\10\113\1\200\14\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\13\113\1\201\11\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\12\113\1\202\12\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\7\113\1\203\15\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\1\204\6\113\1\205\15\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\14\113\1\206\10\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\21\113\1\207\3\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\11\113\1\210\13\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\12\113\1\211\12\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\15\113\1\212\7\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\6\113\1\213\16\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\6\113\1\214\16\113\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\7\113\1\215\15\113\2\0\1\216"+
    "\11\0\1\71\1\72\63\0\1\157\11\0\1\71\1\72"+
    "\63\0\1\217\1\0\1\217\1\220\1\221\6\0\1\220"+
    "\1\0\1\76\1\220\1\0\1\77\1\0\1\100\1\101"+
    "\1\0\1\102\1\103\1\104\1\0\1\105\1\106\1\217"+
    "\14\0\25\76\2\0\1\222\1\0\1\222\2\220\6\0"+
    "\1\220\2\0\1\220\14\0\1\222\43\0\1\164\1\0"+
    "\1\164\1\0\1\164\10\0\1\164\2\0\1\77\1\0"+
    "\1\165\1\166\1\0\1\167\1\170\1\171\1\0\1\172"+
    "\1\173\1\164\14\0\25\164\13\0\1\164\7\0\1\164"+
    "\2\0\1\164\3\0\1\164\72\0\1\165\63\0\1\165"+
    "\7\0\1\165\2\0\1\165\3\0\1\165\57\0\1\165"+
    "\7\0\1\165\6\0\1\165\72\0\1\167\3\0\1\167"+
    "\57\0\1\167\7\0\1\167\2\0\1\167\3\0\1\167"+
    "\57\0\1\167\7\0\1\167\55\0\1\113\1\0\1\113"+
    "\1\0\1\113\10\0\2\113\1\0\1\174\12\0\1\113"+
    "\14\0\7\113\1\223\15\113\2\0\1\113\1\0\1\113"+
    "\1\0\1\113\10\0\2\113\1\0\1\174\12\0\1\113"+
    "\14\0\4\113\1\224\20\113\2\0\1\113\1\0\1\113"+
    "\1\0\1\113\10\0\2\113\1\0\1\174\12\0\1\113"+
    "\14\0\12\113\1\225\12\113\2\0\1\113\1\0\1\113"+
    "\1\0\1\113\10\0\2\113\1\0\1\174\12\0\1\113"+
    "\14\0\13\113\1\226\11\113\2\0\1\113\1\0\1\113"+
    "\1\0\1\113\10\0\2\113\1\0\1\174\12\0\1\113"+
    "\14\0\1\227\24\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\2\113\1\230\22\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\15\113\1\231\7\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\2\113\1\232\22\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\24\113\1\233\2\0\1\113\1\0\1\113\1\0\1\113"+
    "\10\0\2\113\1\0\1\174\12\0\1\113\14\0\1\234"+
    "\12\113\1\235\11\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\23\113\1\236\1\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\6\113\1\237\16\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\21\113\1\240\3\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\5\113\1\241\17\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\22\113\1\242\2\113\2\0\1\157\1\243\2\0\1\243"+
    "\5\0\1\71\1\72\63\0\1\244\1\0\1\244\1\245"+
    "\1\246\6\0\1\245\1\0\1\76\1\245\1\0\1\77"+
    "\1\0\1\100\1\101\1\0\1\102\1\103\1\104\1\0"+
    "\1\105\1\106\1\244\14\0\25\76\2\0\1\247\1\0"+
    "\1\247\2\245\6\0\1\245\2\0\1\245\14\0\1\247"+
    "\43\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\2\113\1\250\22\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\7\113\1\251\15\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\10\113\1\252\14\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\10\113\1\253\14\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\1\254\24\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\10\113\1\255\14\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\15\113\1\256\7\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\4\113\1\257\20\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\7\113\1\260\15\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\1\261\12\113\1\262\11\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\7\113\1\263\15\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\13\113\1\264\11\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\21\113\1\265\3\113"+
    "\2\0\1\113\1\0\1\113\1\0\1\113\10\0\2\113"+
    "\1\0\1\174\12\0\1\113\14\0\16\113\1\266\6\113"+
    "\2\0\1\267\76\0\1\270\1\0\1\270\1\271\1\272"+
    "\6\0\1\271\1\0\1\76\1\271\1\0\1\77\1\0"+
    "\1\100\1\101\1\0\1\102\1\103\1\104\1\0\1\105"+
    "\1\106\1\270\14\0\25\76\2\0\1\273\1\0\1\273"+
    "\2\271\6\0\1\271\2\0\1\271\14\0\1\273\43\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\6\113\1\274\16\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\14\113\1\275\10\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\13\113\1\276\11\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\2\113\1\277\22\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\2\113\1\300\22\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\24\113\1\301\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\1\302\24\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\4\113\1\303\20\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\7\113\1\304\15\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\7\113\1\305\15\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\14\113\1\306\10\113\2\0\1\267\1\307"+
    "\2\0\1\307\72\0\1\310\1\0\1\310\1\311\1\312"+
    "\6\0\1\311\1\0\1\76\1\311\1\0\1\77\1\0"+
    "\1\100\1\101\1\0\1\102\1\103\1\104\1\0\1\105"+
    "\1\106\1\310\14\0\25\76\2\0\1\313\1\0\1\313"+
    "\2\311\6\0\1\311\2\0\1\311\14\0\1\313\43\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\7\113\1\314\15\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\15\113\1\315\7\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\4\113\1\316\20\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\24\113\1\317\2\0\1\113"+
    "\1\0\1\113\1\0\1\113\10\0\2\113\1\0\1\174"+
    "\12\0\1\113\14\0\1\320\24\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\2\113\1\321\22\113\2\0\1\113\1\0"+
    "\1\113\1\0\1\113\10\0\2\113\1\0\1\174\12\0"+
    "\1\113\14\0\7\113\1\322\15\113\2\0\1\323\76\0"+
    "\1\324\1\0\1\324\1\325\1\326\6\0\1\325\1\0"+
    "\1\76\1\325\1\0\1\77\1\0\1\100\1\101\1\0"+
    "\1\102\1\103\1\104\1\0\1\105\1\106\1\324\14\0"+
    "\25\76\2\0\1\327\1\0\1\327\2\325\6\0\1\325"+
    "\2\0\1\325\14\0\1\327\43\0\1\113\1\0\1\113"+
    "\1\0\1\113\10\0\2\113\1\0\1\174\12\0\1\113"+
    "\14\0\1\330\24\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\4\113\1\331\20\113\2\0\1\113\1\0\1\113\1\0"+
    "\1\113\10\0\2\113\1\0\1\174\12\0\1\113\14\0"+
    "\1\332\24\113\2\0\1\333\1\0\1\333\1\334\1\335"+
    "\6\0\1\334\1\0\1\76\1\334\1\0\1\77\1\0"+
    "\1\100\1\101\1\0\1\102\1\103\1\104\1\0\1\105"+
    "\1\106\1\333\14\0\25\76\2\0\1\336\1\0\1\336"+
    "\2\334\6\0\1\334\2\0\1\334\14\0\1\336\43\0"+
    "\1\113\1\0\1\113\1\0\1\113\10\0\2\113\1\0"+
    "\1\174\12\0\1\113\14\0\16\113\1\337\6\113\2\0"+
    "\1\340\1\0\1\340\1\341\1\342\6\0\1\341\1\0"+
    "\1\76\1\341\1\0\1\77\1\0\1\100\1\101\1\0"+
    "\1\102\1\103\1\104\1\0\1\105\1\106\1\340\14\0"+
    "\25\76\2\0\1\343\1\0\1\343\2\341\6\0\1\341"+
    "\2\0\1\341\14\0\1\343\43\0\1\344\1\0\1\344"+
    "\1\345\1\346\6\0\1\345\1\0\1\76\1\345\1\0"+
    "\1\77\1\0\1\100\1\101\1\0\1\102\1\103\1\104"+
    "\1\0\1\105\1\106\1\344\14\0\25\76\2\0\1\347"+
    "\1\0\1\347\2\345\6\0\1\345\2\0\1\345\14\0"+
    "\1\347\43\0\1\350\1\0\1\350\1\351\1\352\6\0"+
    "\1\351\1\0\1\76\1\351\1\0\1\77\1\0\1\100"+
    "\1\101\1\0\1\102\1\103\1\104\1\0\1\105\1\106"+
    "\1\350\14\0\25\76\2\0\1\353\1\0\1\353\2\351"+
    "\6\0\1\351\2\0\1\351\14\0\1\353\43\0\1\354"+
    "\1\0\1\354\1\355\1\356\6\0\1\355\1\0\1\76"+
    "\1\355\1\0\1\77\1\0\1\100\1\101\1\0\1\102"+
    "\1\103\1\104\1\0\1\105\1\106\1\354\14\0\25\76"+
    "\2\0\1\357\1\0\1\357\2\355\6\0\1\355\2\0"+
    "\1\355\14\0\1\357\43\0\1\360\1\0\1\360\1\361"+
    "\1\362\6\0\1\361\1\0\1\76\1\361\1\0\1\77"+
    "\1\0\1\100\1\101\1\0\1\102\1\103\1\104\1\0"+
    "\1\105\1\106\1\360\14\0\25\76\2\0\1\363\1\0"+
    "\1\363\2\361\6\0\1\361\2\0\1\361\14\0\1\363"+
    "\43\0\1\364\1\0\1\364\1\365\1\366\6\0\1\365"+
    "\1\0\1\76\1\365\1\0\1\77\1\0\1\100\1\101"+
    "\1\0\1\102\1\103\1\104\1\0\1\105\1\106\1\364"+
    "\14\0\25\76\2\0\1\367\1\0\1\367\2\365\6\0"+
    "\1\365\2\0\1\365\14\0\1\367\43\0\1\370\1\0"+
    "\1\370\1\371\1\372\6\0\1\371\1\0\1\76\1\371"+
    "\1\0\1\77\1\0\1\100\1\101\1\0\1\102\1\103"+
    "\1\104\1\0\1\105\1\106\1\370\14\0\25\76\2\0"+
    "\1\373\1\0\1\373\2\371\6\0\1\371\2\0\1\371"+
    "\14\0\1\373\43\0\1\374\1\0\1\374\1\375\1\376"+
    "\6\0\1\375\1\0\1\76\1\375\1\0\1\77\1\0"+
    "\1\100\1\101\1\0\1\102\1\103\1\104\1\0\1\105"+
    "\1\106\1\374\14\0\25\76\2\0\1\377\1\0\1\377"+
    "\2\375\6\0\1\375\2\0\1\375\14\0\1\377\43\0"+
    "\1\u0100\1\0\1\u0100\1\u0101\1\u0102\6\0\1\u0101\1\0"+
    "\1\76\1\u0101\1\0\1\77\1\0\1\100\1\101\1\0"+
    "\1\102\1\103\1\104\1\0\1\105\1\106\1\u0100\14\0"+
    "\25\76\2\0\1\u0103\1\0\1\u0103\2\u0101\6\0\1\u0101"+
    "\2\0\1\u0101\14\0\1\u0103\43\0\1\u0104\1\0\1\u0104"+
    "\1\u0105\1\u0106\6\0\1\u0105\1\0\1\76\1\u0105\1\0"+
    "\1\77\1\0\1\100\1\101\1\0\1\102\1\103\1\104"+
    "\1\0\1\105\1\106\1\u0104\14\0\25\76\2\0\1\u0107"+
    "\1\0\1\u0107\2\u0105\6\0\1\u0105\2\0\1\u0105\14\0"+
    "\1\u0107\43\0\1\u0108\1\0\1\u0108\1\u0109\1\u010a\6\0"+
    "\1\u0109\1\0\1\76\1\u0109\1\0\1\77\1\0\1\100"+
    "\1\101\1\0\1\102\1\103\1\104\1\0\1\105\1\106"+
    "\1\u0108\14\0\25\76\2\0\1\u010b\1\0\1\u010b\2\u0109"+
    "\6\0\1\u0109\2\0\1\u0109\14\0\1\u010b\43\0\1\u010c"+
    "\1\0\1\u010c\1\u010d\1\u010e\6\0\1\u010d\1\0\1\76"+
    "\1\u010d\1\0\1\77\1\0\1\100\1\101\1\0\1\102"+
    "\1\103\1\104\1\0\1\105\1\106\1\u010c\14\0\25\76"+
    "\2\0\1\u010f\1\0\1\u010f\2\u010d\6\0\1\u010d\2\0"+
    "\1\u010d\14\0\1\u010f\43\0\1\u0110\1\0\1\u0110\1\u0111"+
    "\1\u0112\6\0\1\u0111\1\0\1\76\1\u0111\1\0\1\77"+
    "\1\0\1\100\1\101\1\0\1\102\1\103\1\104\1\0"+
    "\1\105\1\106\1\u0110\14\0\25\76\2\0\1\u0113\1\0"+
    "\1\u0113\2\u0111\6\0\1\u0111\2\0\1\u0111\14\0\1\u0113"+
    "\43\0\1\u0114\1\0\1\u0114\1\u0115\1\u0116\6\0\1\u0115"+
    "\1\0\1\76\1\u0115\1\0\1\77\1\0\1\100\1\101"+
    "\1\0\1\102\1\103\1\104\1\0\1\105\1\106\1\u0114"+
    "\14\0\25\76\2\0\1\u0117\1\0\1\u0117\2\u0115\6\0"+
    "\1\u0115\2\0\1\u0115\14\0\1\u0117\43\0\1\u0118\1\0"+
    "\1\u0118\1\0\1\76\10\0\1\76\2\0\1\77\1\0"+
    "\1\100\1\101\1\0\1\102\1\103\1\104\1\0\1\105"+
    "\1\106\1\u0118\14\0\25\76\2\0\1\u0119\1\0\1\u0119"+
    "\30\0\1\u0119\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10773];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\2\11\13\1\1\11\2\1\1\11\3\1\5\11\24\1"+
    "\1\0\2\1\14\0\1\11\1\0\1\1\1\0\1\1"+
    "\3\11\20\0\1\11\13\1\1\11\4\1\2\0\2\1"+
    "\7\0\1\11\1\1\10\0\1\1\7\0\2\1\2\0"+
    "\2\1\6\0\1\1\11\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\1\1\6\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\1\1\2\0\4\1\6\0\1\1\2\0"+
    "\2\1\1\0\2\1\2\0\3\1\2\0\1\1\1\0"+
    "\3\1\2\0\3\1\2\0\2\1\2\0\2\1\2\0"+
    "\2\1\2\0\2\1\2\0\2\1\2\0\2\1\2\0"+
    "\2\1\2\0\2\1\2\0\2\1\2\0\2\1\2\0"+
    "\2\1\2\0\2\1\2\0\2\1\2\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BeancountLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 53: break;
          case 2: 
            { yybegin(sINVALID);
            } 
            // fall through
          case 54: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 55: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 56: break;
          case 5: 
            { return SLASH;
            } 
            // fall through
          case 57: break;
          case 6: 
            { return MINUS;
            } 
            // fall through
          case 58: break;
          case 7: 
            { return COMMA;
            } 
            // fall through
          case 59: break;
          case 8: 
            { return HASH;
            } 
            // fall through
          case 60: break;
          case 9: 
            { return FLAG;
            } 
            // fall through
          case 61: break;
          case 10: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 11: 
            { return COMMENT;
            } 
            // fall through
          case 63: break;
          case 12: 
            { return PIPE;
            } 
            // fall through
          case 64: break;
          case 13: 
            { return AT;
            } 
            // fall through
          case 65: break;
          case 14: 
            { return LCURL;
            } 
            // fall through
          case 66: break;
          case 15: 
            { return RCURL;
            } 
            // fall through
          case 67: break;
          case 16: 
            { return TILDE;
            } 
            // fall through
          case 68: break;
          case 17: 
            { return PLUS;
            } 
            // fall through
          case 69: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 70: break;
          case 19: 
            { return RPAREN;
            } 
            // fall through
          case 71: break;
          case 20: 
            { return ASTERISK;
            } 
            // fall through
          case 72: break;
          case 21: 
            { yybegin(sINVALID);
    return BAD_CHARACTER;
            } 
            // fall through
          case 73: break;
          case 22: 
            { return CURRENCY;
            } 
            // fall through
          case 74: break;
          case 23: 
            { return STRING;
            } 
            // fall through
          case 75: break;
          case 24: 
            { return TAG;
            } 
            // fall through
          case 76: break;
          case 25: 
            { return LINK;
            } 
            // fall through
          case 77: break;
          case 26: 
            { return ATAT;
            } 
            // fall through
          case 78: break;
          case 27: 
            { return LCURLCURL;
            } 
            // fall through
          case 79: break;
          case 28: 
            { return RCURLCURL;
            } 
            // fall through
          case 80: break;
          case 29: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(sIGNORE);
            } 
            // fall through
          case 81: break;
          case 30: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return INDENT;
            } 
            // fall through
          case 82: break;
          case 31: 
            { return ACCOUNT;
            } 
            // fall through
          case 83: break;
          case 32: 
            { return KEY;
            } 
            // fall through
          case 84: break;
          case 33: 
            { return TXN_KEY;
            } 
            // fall through
          case 85: break;
          case 34: 
            { return PAD_KEY;
            } 
            // fall through
          case 86: break;
          case 35: 
            { return NOTE_KEY;
            } 
            // fall through
          case 87: break;
          case 36: 
            { return OPEN_KEY;
            } 
            // fall through
          case 88: break;
          case 37: 
            { return CLOSE_KEY;
            } 
            // fall through
          case 89: break;
          case 38: 
            { return EVENT_KEY;
            } 
            // fall through
          case 90: break;
          case 39: 
            { return PRICE_KEY;
            } 
            // fall through
          case 91: break;
          case 40: 
            { return QUERY_KEY;
            } 
            // fall through
          case 92: break;
          case 41: 
            { return CUSTOM_KEY;
            } 
            // fall through
          case 93: break;
          case 42: 
            { return OPTION_KEY;
            } 
            // fall through
          case 94: break;
          case 43: 
            { return PLUGIN_KEY;
            } 
            // fall through
          case 95: break;
          case 44: 
            { return POPTAG_KEY;
            } 
            // fall through
          case 96: break;
          case 45: 
            { return BALANCE_KEY;
            } 
            // fall through
          case 97: break;
          case 46: 
            { return POPMETA_KEY;
            } 
            // fall through
          case 98: break;
          case 47: 
            { return PUSHTAG_KEY;
            } 
            // fall through
          case 99: break;
          case 48: 
            { return INCLUDE_KEY;
            } 
            // fall through
          case 100: break;
          case 49: 
            { return DATE;
            } 
            // fall through
          case 101: break;
          case 50: 
            { return PUSHMETA_KEY;
            } 
            // fall through
          case 102: break;
          case 51: 
            { return DOCUMENT_KEY;
            } 
            // fall through
          case 103: break;
          case 52: 
            { return COMMODITY_KEY;
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
