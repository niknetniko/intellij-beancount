{
  parserClass="com.outskirtslabs.beancount.parser.BeancountParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
//  extends(".*expr")=expr

  psiClassPrefix="Beancount"
  psiImplClassSuffix="Impl"
  psiPackage="com.outskirtslabs.beancount.psi"
  psiImplPackage="com.outskirtslabs.beancount.psi.impl"

  elementTypeHolderClass="com.outskirtslabs.beancount.psi.BeancountTypes"
  elementTypeClass="com.outskirtslabs.beancount.psi.elements.BeancountElementType"
  tokenTypeClass="com.outskirtslabs.beancount.psi.BeancountTokenType"

  psiImplUtilClass="com.outskirtslabs.beancount.psi.impl.BeancountPsiImplUtil"

  parserImports=[
    'static com.outskirtslabs.beancount.psi.impl.BeancountPsiImplUtil.*'
  ]

  tokens=[
//    INDENT="regexp:^[ \t]+/[^ \t\r\n]"
//    EOL="regexp:(\r\n|\r|\n)"        /* End-of-line */
//    COMMENT="regexp:^([ \t]+/[^ \t\r\n])*;.*"
//    PIPE="|"       /* | */
//    ATAT="@@"       /* @@ */
//    AT="@"         /* @ */
//    LCURLCURL="{{"  /* {{ */
//    RCURLCURL="}}"  /* }} */
//    LCURL="{"      /* { */
//    RCURL="}"      /* } */
//    COMMA=","      /* , */
//    TILDE="~"      /* ~ */
//    HASH="#"       /* # */
//    ASTERISK="*"   /* * */
//    SLASH="/"      /* / */
//    COLON=":"      /* : */
//    PLUS="+"       /* + */
//    MINUS="-"      /* - */
//    LPAREN="("     /* ( */
//    RPAREN=")"     /* ) */
//    FLAG="regexp:[!&#?%PSTCURM]"    /* Valid characters for flags */
//    TXN_KEY="txn"                 /* 'txn' keyword */
//    BALANCE="balance"             /* 'balance' keyword */
//    OPEN_KEY="open"                /* 'open' keyword */
//    CLOSE_KEY="close"               /* 'close' keyword */
//    COMMODITY_KEY="commodity"           /* 'commodity' keyword */
//    PAD_KEY="pad"                 /* 'pad' keyword */
//    EVENT_KEY="event"               /* 'event' keyword */
//    PRICE_KEY="price"               /* 'price' keyword */
//    NOTE_KEY="note"                /* 'note' keyword */
//    DOCUMENT_KEY="document"            /* 'document' keyword */
//    QUERY_KEY="query"               /* 'query' keyword */
//    CUSTOM_KEY="custom"              /* 'custom' keyword */
//    PUSHTAG_KEY="pushtag"             /* 'pushtag' keyword */
//    POPTAG_KEY="poptag"              /* 'poptag' keyword */
//    PUSHMETA_KEY="pushmeta"            /* 'pushmeta' keyword */
//    POPMETA_KEY="popmeta"             /* 'popmeta' keyword */
//    OPTION_KEY="option"              /* 'option' keyword */
//    INCLUDE_KEY="include"             /* 'include' keyword */
//    PLUGIN_KEY="plugin"              /* 'plugin' keyword */
//    NUMBER="regexp:([0-9]+|[0-9][0-9,]+[0-9])(\.[0-9]*)?"
//    DATE="regexp:[0-9]{4}[\-/][0-9]+[\-/][0-9]+"
//    CURRENCY="regexp:[A-Z][A-Z0-9'._\-]{0,22}[A-Z0-9]"
//    LITERAL="regexp:\"([^\\\"]|\\.)*\""
//    NUMBER="regexp:([0-9]+|[0-9][0-9,]+[0-9])(\.[0-9]*)?"
//    TAG="regexp:#[A-Za-z0-9\-_/.]+"
//    LINK="regexp:\^[A-Za-z0-9\-_/.]+"
//    KEY="regexp:[a-z][a-zA-Z0-9\-_]+/:"
  ]
}

file ::= declarations end?

txn ::= TXN_KEY | FLAG | ASTERISK | HASH

end ::= EOL

number_expr ::= literal_expr
    | plus_expr
    | minus_expr
    | asterisk_expr
    | slash_expr
    | unary_min
    | unary_plus
    | paren_expr
{
    implements="com.outskirtslabs.beancount.psi.elements.BeancountExprElement"
    mixin="com.outskirtslabs.beancount.psi.impl.BeancountExprElementImpl"
}

plus_expr ::= number_expr PLUS number_expr {extends=number_expr}
minus_expr ::= number_expr MINUS number_expr {extends=number_expr}
asterisk_expr ::= number_expr ASTERISK number_expr {extends=number_expr}
slash_expr ::= number_expr SLASH number_expr {extends=number_expr}
unary_min ::= MINUS number_expr {extends=number_expr}
unary_plus ::= PLUS number_expr {extends=number_expr}
paren_expr ::= LPAREN number_expr RPAREN {extends=number_expr}
literal_expr ::= NUMBER {extends=number_expr}

txn_strings ::= (STRING | PIPE)+

tags_links ::= (LINK | TAG)*

transaction ::= DATE txn txn_strings tags_links end posting_or_kv_list

optflag ::= [ASTERISK | HASH | FLAG]

price_annotation ::= incomplete_amount

posting ::= INDENT optflag account_symbol incomplete_amount cost_spec end
    | INDENT optflag account_symbol incomplete_amount cost_spec AT price_annotation end
    | INDENT optflag account_symbol incomplete_amount cost_spec ATAT price_annotation end
    | INDENT optflag account_symbol end

key_value ::= KEY key_value_value

key_value_line ::= INDENT key_value end

key_value_value ::= [STRING
    | account_symbol
    | DATE
    | currency_symbol
    | TAG
    | BOOL
    | NONE
    | number_expr
    | amount]

posting_or_kv_list ::= (INDENT end
    | INDENT tags_links end
    | key_value_line
    | posting)*

key_value_list ::= (INDENT end | key_value_line)+

// We give currency it's own entry, to be able to cache it.
currency_symbol ::= CURRENCY {
    mixin="com.outskirtslabs.beancount.psi.impl.BeancountCurrencyElementImpl"
    implements="com.outskirtslabs.beancount.psi.elements.BeancountCurrencyElement"
    methods=[getName setName getNameIdentifier getReference]
    stubClass= "com.outskirtslabs.beancount.psi.stub.CurrencySymbolStub"
    elementTypeFactory="com.outskirtslabs.beancount.psi.elements.BeancountElementTypeFactory.factoryCurrency"
}

account_symbol ::= ACCOUNT {
    implements="com.outskirtslabs.beancount.psi.elements.BeancountAccountSymbol"
    mixin="com.outskirtslabs.beancount.psi.impl.BeancountAccountSymbolMixin"
}

account_definition ::= ACCOUNT {
    implements="com.outskirtslabs.beancount.psi.elements.BeancountAccountDefinition"
    mixin="com.outskirtslabs.beancount.psi.impl.BeancountAccountDefinitionMixin"
    stubClass= "com.outskirtslabs.beancount.psi.stub.AccountStub"
    elementTypeFactory="com.outskirtslabs.beancount.psi.elements.BeancountElementTypeFactory.factoryAccount"
}

currency_list ::= [currency_one | currency_multiple]

currency_one ::= currency_symbol {extends=currency_list}
currency_multiple ::= currency_list COMMA currency_symbol {extends=currency_list}

pushtag ::= PUSHTAG_KEY TAG end

poptag ::= POPTAG_KEY TAG end

pushmeta ::= PUSHMETA_KEY key_value end

popmeta ::= POPMETA_KEY KEY end

open ::= DATE OPEN_KEY account_definition currency_list? opt_booking end key_value_list?

opt_booking ::= STRING?

close ::= DATE CLOSE_KEY account_symbol end key_value_list?

commodity ::= DATE COMMODITY_KEY currency_symbol end key_value_list?

pad ::= DATE PAD_KEY account_symbol account_symbol end key_value_list?

balance ::= DATE BALANCE_KEY account_symbol amount_tolerance end key_value_list?

amount ::= number_expr currency_symbol

amount_tolerance ::= number_expr currency_symbol | number_expr TILDE number_expr currency_symbol

maybe_number ::= number_expr?

maybe_currency ::= currency_symbol?

compound_amount ::= maybe_number currency_symbol
    | number_expr maybe_currency
    | maybe_number HASH maybe_number currency_symbol

incomplete_amount ::= maybe_number maybe_currency

cost_spec ::= [LCURL cost_comp_list RCURL
    | LCURLCURL cost_comp_list RCURLCURL]

cost_comp_list ::= cost_comp (COMMA cost_comp)*

cost_comp ::= compound_amount
    | DATE
    | STRING
    | ASTERISK

price ::= DATE PRICE_KEY currency_symbol amount end key_value_list?

event ::= DATE EVENT_KEY STRING STRING end key_value_list?

query ::= DATE QUERY_KEY STRING STRING end key_value_list?

note ::= DATE NOTE_KEY account_symbol STRING end key_value_list?

document ::= DATE DOCUMENT_KEY account_symbol file_path tags_links end key_value_list?

custom_value ::= STRING
    | DATE
    | BOOL
    | amount
    | number_expr
    | account_symbol

custom_value_list ::= custom_value*

custom ::= DATE CUSTOM_KEY STRING custom_value_list end key_value_list?

entry ::= (transaction
    | balance
    | open
    | close
    | pad
    | document
    | note
    | event
    | price
    | commodity
    | query
    | custom) COMMENT?

option ::= OPTION_KEY STRING STRING end

file_path ::= STRING {
    implements="com.outskirtslabs.beancount.psi.elements.BeancountFilePath"
    mixin="com.outskirtslabs.beancount.psi.impl.BeancountFilePathMixin"
}

include ::= INCLUDE_KEY file_path end

plugin ::= PLUGIN_KEY STRING end | PLUGIN_KEY STRING STRING end

directive ::= pushtag
    | poptag
    | pushmeta
    | popmeta
    | option
    | include
    | plugin

declarations ::= (IGNORED | directive | entry | end)*
